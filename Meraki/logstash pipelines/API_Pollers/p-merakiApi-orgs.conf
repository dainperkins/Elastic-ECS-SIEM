######################################################################################
#                                                                                  
#  Meraki API Device Poller                                                  
#                                                                                  
#  Last Revised:    04/21/2020
#  Transport:       HTTP Poller                                   
#  Compatibility:   ecs 1.5.0                                    
#  Notes:           Logstash pipeline to pull device information from Meraki API for 
#                   Enrichment Data
#                   MXs must have VLANs enabled for Subnet, DHCP, and lanIp
#                  
#                   GeoParsing is manual, based on address field in Meraki device:
#                     name;city_name;region_name;country_iso_code;region_iso_code;continent_name
#                     I'd recommend using internal "site codes" for names
#  To Do:           split out MR/ MX SSID retrieval 
#                    good schedule- run on new device? (webhook from Meraki)
#                   automate enrichment index build
#
#    !! WARNING !!   !! WARNING !!   !! WARNING !!   !! WARNING !!   !! WARNING !!  
#        If you enable VLANs on MX/W devices SSIDs will need to be reenabled!!!
######################################################################################

input {

    ##################################################################################
    # Start with Meraki Orgs
    ##################################################################################

    http_poller {
        urls => {
            meraki => {
                method => get
                url => "https://api.meraki.com/api/v0/organizations"
                headers => {
                    "X-Cisco-Meraki-API-Key" => "${meraki_api}"
                    Accept => "application/json"
                }
            }
        }
        request_timeout => 60
        schedule => { every => "1m" }
        codec => "json"
        metadata_target => "temp_org"
        target => "organization"
    }
    
}

filter {

    ## NOTE: iirc API keys are org specific, but if not uncomment
    ## the following split to allow for multiple organizations
    ## split { field => "organization" }

    ##################################################################################
    ### Get Meraki Network ids per organiaztion 
    ##################################################################################

    http {
        url => "https://n257.meraki.com/api/v0/organizations/%{[organization][id]}/networks"
        verb => "GET"
        headers => {
            "X-Cisco-Meraki-API-Key" => "${meraki_api}"
            Accept => "application/json" }
        target_body =>  "network" 
        target_headers => "temp_network"
    }

    split { field => "network" }

    ##################################################################################
    ### Get Meraki Device Information per network (org/network/device
    ##################################################################################

    http {
        url => "https://api.meraki.com/api/v0/networks/%{[network][id]}/devices"
        verb => "GET"
        headers => {
            "X-Cisco-Meraki-API-Key" => "${meraki_api}"
            Accept => "application/json" }
        target_body =>  "device" 
        target_headers => "temp_device"
    }

    split { field => "device" }

    ##################################################################################
    ### Get Meraki MX & L3 MS Switch VLANS
    ##################################################################################

    if "MX" in [device][model] or "MS3" in [device][model] {
        http {
            url => "https://api.meraki.com/api/v0/networks/%{[network][id]}/vlans"
            verb => "GET"
            headers => {
                "X-Cisco-Meraki-API-Key" => "${meraki_api}"
                Accept => "application/json" }
            target_body =>  "vlan" 
            target_headers => "temp_vlan"
        }
        split { field => "vlan" }
        
        ## Fix LanIp for MX Series & rename vlan fields
        mutate {
            update => { "[device][lanIp]" => "%{[vlan][applianceIp]}" }
            add_field => { 
                "[meraki][vlan][id]" => "%{[vlan][id]}"
                "[meraki][vlan][name]" => "%{[vlan][name]}" 
                "[meraki][vlan][network_id]" => "%{[vlan][networkId]}" 
                "[meraki][vlan][subnet]" => "%{[vlan][subnet]}" 
            }
            remove_field => [ "[vlan]", "temp_vlan" ]
        }
    }

    ##################################################################################
    ### Get Meraki MR SSIDS
    ##################################################################################
    if "MR" in [device][model] {
        http {
            url => "https://api.meraki.com/api/v0/networks/%{[network][id]}/devices/%{[device][serial]}/wireless/status"
            verb => "GET"
            headers => {
                "X-Cisco-Meraki-API-Key" => "${meraki_api}"
                Accept => "application/json" }
            target_body =>  "ssid" 
            target_headers => "temp_ssid"
        }
        split { field => "[ssid][basicServiceSets]" }

        if "Unconfigured" in [ssid][basicServiceSets][ssidName] {
            drop {}
        }

    }





    

    ## Split up Firmware Information, skip offline devices

    if  [device][firmware] != "Not running configured version" {
        mutate { add_field => { "firmware" => "%{[device][firmware]}" } }
        mutate { split => { "firmware" => "-" } }
        mutate {
            add_field => { 
                "[os][family]" => "%{[firmware][0]}" 
                "[os][version]" =>  "%{[firmware][1]}.%{[firmware][2]}" 
                "[os][full]" => "%{[firmware][0]} %{[firmware][1]}.%{[firmware][2]}" 
            }
        }
    }
    else {
        mutate {  update => { "[device][firmware]" => "unknown" } }
    }


    ## Internal address / geo Parsing based on Meraki Dashboard
    ######################################################################################
    ## name;city_name;region_name;country_iso_code;region_iso_code;continent_name

    grok {
        match => { "[device][address]" => "%{DATA:[geo][name]};%{DATA:[geo][city_name]};%{DATA:[geo][region_name]};%{WORD:[geo][country_iso_code]}-%{WORD:[geo][region_iso_code]};%{GREEDYDATA:[geo][continent_name]}" }
    }

    ## General Cleanup, fidl renaming, etc.
    mutate {

        ## update region ISO code
        update => { "[geo][region_iso_code]" => "%{[geo][country_iso_code]}-%{[geo][region_iso_code]}" }

        rename => [ "[organization]", "[meraki][organization]" ]
        rename => [ "[network]", "[meraki][network]" ]
        rename => [ "[device]", "[meraki][device]" ]
        rename => [ "[device][firmware]", "[meraki][device][firmware]" ]


        remove_field => [ "[meraki][organization][@version]", "[meraki][organization][@timestamp]", "[meraki][organization][samlConsumerUrl]", "[meraki][organization][samlConsumerUrls]" ]
        remove_field => [ "[meraki][network][disableMyMerakiCom]", "[meraki][network][disableRemoteStatusPage]" ]
        remove_field => [ "[meraki][device][networkId]", "[meraki][network][organizationId]" ]
        remove_field => [ "[temp_org]", "[temp_network]", "[temp_device]", "[temp_ssid]", "[firmware]" ]

        ## Add root level enrichment Fields for direct insertion
        add_field => { 
            "mac" => "%{[meraki][device][mac]}" 
            "name" => "%{[meraki][device][name]}" 
            "product" => "%{[meraki][device][model]}" 
            "serial_number" => "%{[meraki][device][serial]}" 
        }

    }
}

output {
    elasticsearch {
        hosts => "${ES_HOST}"
        user => "${ES_INGEST}"
        password => "${ES_INGEST_PW}"
        index => "ecs-meraki-inventory-test"
    }

##    file {
##        path => "/tmp/debug_meraki_api_poller.log"
##        codec => "rubydebug"
##    }


}

######################################################################################
#                                                                                  
#  Meraki API Device Poller                                                  
#                                                                                  
#  Last Revised:    03/05/2020
#  Transport:       HTTP Poller                                   
#  Compatibility:   ecs 1.5.0                                    
#  Notes:           Initial config to pull device information from Meraki API for 
#                   Enrichment Data
#                   MXs must have VLANs enabled for Subnet, DHCP, and lanIp
#                  
#                   GeoParsing is manual, based on address field in Meraki device:
#                     name;city_name;region_name;country_iso_code;region_iso_code;continent_name
#                     I'd recommend using internal "site codes" for names
#
#  To Dos:          1) Ignore the rest of the address field, and populate e.g. [meraki][address]
#                   2) add PR for ECS wireless fields
#                   3) populate and use device info for asset index / enrichment
#                   4) Deal with device.firmware = Not running configured version (offline)
#                   5) Separate poller for security alerts (AMP + syslog dont seem to mix)
#                   6) Rename fields (drop top level for enrichments or you'll have to rename)
#                   7) Pipeline to handle split of MX (vlan + ssids?)
#
#    !! WARNING !!   !! WARNING !!   !! WARNING !!   !! WARNING !!   !! WARNING !!  
#        If you enable VLANs on MX/W devices SSIDs will need to be reenabled!!!
######################################################################################

input {

    ##################################################################################
    # Start with Meraki Orgs
    ##################################################################################

    http_poller {
        urls => {
            meraki => {
                method => get
                url => "https://api.meraki.com/api/v0/organizations"
                headers => {
                    "X-Cisco-Meraki-API-Key" => "${meraki_api}"
                    Accept => "application/json"
                }
            }
        }
        request_timeout => 60
        schedule => { every => "1m" }
        codec => "json"
        metadata_target => "temp_org"
        target => "organization"
    }
    
}



filter {

    ## NOTE: iirc API keys are org specific, but if not uncomment
    ## the following split to allow for multiple organizations

    ## split { field => "organization" }


    ##################################################################################
    ### Get Meraki Network ids per organiaztion 
    ##################################################################################

    http {
        url => "https://n257.meraki.com/api/v0/organizations/%{[organization][id]}/networks"
        verb => "GET"
        headers => {
            "X-Cisco-Meraki-API-Key" => "${meraki_api}"
            Accept => "application/json" }
        target_body =>  "network" 
        target_headers => "temp_network"
    }

    split { field => "network" }

    ##################################################################################
    ### Get Meraki Device Information per network (org/network/device
    ##################################################################################

    http {
        url => "https://api.meraki.com/api/v0/networks/%{[network][id]}/devices"
        verb => "GET"
        headers => {
            "X-Cisco-Meraki-API-Key" => "${meraki_api}"
            Accept => "application/json" }
        target_body =>  "device" 
        target_headers => "temp_device"
    }

    split { field => "device" }

    ##################################################################################
    ### Get Meraki MX VLANs
    ##################################################################################

    if "MX" in [device][model] {
        http {
            url => "https://api.meraki.com/api/v0/networks/%{[network][id]}/vlans"
            verb => "GET"
            headers => {
                "X-Cisco-Meraki-API-Key" => "${meraki_api}"
                Accept => "application/json" }
            target_body =>  "vlan" 
            target_headers => "temp_vlan"
        }
        split { field => "vlan" }

    }
    
    mutate {
        ## remove temp http poller metadata
        remove_field => [ "temp_org", "temp_network", "temp_device", "temp_vlan" ]
        

    }
 
    ## Internal address / geo Parsing based on Meraki Dashboard
    ######################################################################################
    ## name;city_name;region_name;country_iso_code;region_iso_code;continent_name

    grok {
        match => { "[device][address]" => "%{DATA:[geo][name]};%{DATA:[geo][city_name]};%{DATA:[geo][region_name]};%{WORD:[geo][country_iso_code]}-%{WORD:[geo][region_iso_code]};%{GREEDYDATA:[geo][continent_name]}" }
    }

}

output {

    elasticsearch {
        hosts => "${ES_HOST}"
        user => "${ES_INGEST}"
        password => "${ES_INGEST_PW}"
        index => "ecs-meraki-inventory-test"
    }
  
}

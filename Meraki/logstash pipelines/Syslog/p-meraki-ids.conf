######################################################################################
#                                                                                  
#  Meraki IDS Logstash Pipeline                                                  
#                                                                                  
#  Last Revised:    04/29/2019 
#  Transport:       logstash pipeline                                   
#  Compatibility:   ecs 1.5.0 dev                                    
#  Notes:           
######################################################################################

input { 
    pipeline { 
        address => "meraki-ids" 
    } 
}

filter {

    ######################################################
    ###                Grok Meraki URLs                ###
    ######################################################
    grok {    
        match => { "message" => "%{INT:[temp][millis]}.%{INT:[temp][nanos]} %{WORD:[observer][name]} %{WORD:[temp][module]} %{WORD:[temp][type]} signature=%{NOTSPACE:[rule][id]}:%{NUMBER:[temp][num]} priority=%{NUMBER:[event][severity]} timestamp=%{INT:[millis]}.%{INT:[nanos]} ?(?:shost=%{MAC:[source][mac]})? ?(?:dhost=%{MAC:[destination][mac]})? direction=%{WORD:[temp][direction]} protocol=%{WORD:[network][transport]}/%{WORD:[network][type]} src=%{IP:[source][ip]}:%{NUMBER:[source][port]} dst=%{IP:[destination][ip]}:%{NUMBER:[destination][port]} message: %{NOTSPACE:[rule][category]} %{GREEDYDATA:[rule][description]}"}
    }

    ######################################################
    ###         Fix for Nanosecond timestamps          ###
    ######################################################
    truncate {
            fields => "nanos"
            length_bytes => 3
    }
    date {
        match => [ "%{millis}%{nanos}", "UNIX_MS"]
        target => "@timestamp"
    }


    mutate {

        add_field => { 
            "[rule][reference]" => "https://snort.org/rule-docs/%{[rule][id]}"
            "[event][kind]" => "alert" 
            "[event][category]" => 	intrusion_detection 
            "[event][outcome]" => "success"
            "[event][dataset]" => "meraki.ids" 
            "[observer][vendor]" => "meraki" 
        }
        rename =>    { "[host]" => "[observer][ip]"  }
        gsub => [ "[observer][name]", "\_", "." ]
    }

    ## Set Network Direction
    #####################################
    if [temp][direction] == "egress" { mutate { add_field => { "[network][direction]" => "outbound" } } }
    else if [temp][direction] == "ingress" { mutate { add_field => { "[network][direction]" => "inbound" } } }


    ######################################################
    ###                   Community ID                 ###
    ######################################################
    if [source][ip] and [destination][ip] and [network][transport]  {
        ruby {
            path => "/etc/logstash/conf.d/ruby/logstash-ruby-filter-community-id.rb"
            script_params => {
                "source_ip_field" => "[source][ip]"
                "dest_ip_field" => "[destination][ip]"
                "source_port_field" => "[source][port]"
                "dest_port_field" => "[destination][port]"
                "protocol_field" => "[network][transport]"
                "target_field" => "[network][community_id]"
            }
            tag_on_exception =>  "_rubyexception-all-community_id_bidirectional"
        }
    }

    mutate {
        remove_field => [ "message", "millis", "[temp]", "type", "nanos" ]
    }
}

output {

    ## Meraki URL Logging
    elasticsearch {
        hosts => "${ES77_HOST}"
        user => "${ES77_INGEST}"
        password => "${ES77_INGEST_PW}"
        index => "ecs-meraki-ids"
        pipeline => "meraki"
    }

   # file {
   #    path => "/var/log/logstash/syslog/meraki-ids.log"
   #    codec => "rubydebug"
   # }
}
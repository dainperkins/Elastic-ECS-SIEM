######################################################################################
#                                                                                  
#  Meraki URL Logstash Pipeline                                                  
#                                                                                  
#  Last Revised:    04/29/2019 
#  Transport:       logstash pipeline                                   
#  Compatibility:   ecs 1.5.0 dev                                    
#  Notes:           
######################################################################################

input { 
    pipeline { 
        address => "meraki-url" 
    } 
}

filter {

    ######################################################
    ###                Grok Meraki URLs                ###
    ######################################################
    grok {    
        match => { "message" => "%{INT:[millis]}.%{INT:[nanos]} %{WORD:[observer][name]} %{WORD:[temp][module]} src=%{IP:[source][ip]}:%{NUMBER:[source][port]} dst=%{IP:[destination][ip]}:%{NUMBER:[destination][port]} mac=%{MAC:[source][mac]} ?(?:agent=%{QS:[useragent]})? request: %{WORD:[http][request][method]} %{URI:[url][original]}"}
    }

    ######################################################
    ###        Split URL into correct components       ###
    ######################################################
    if [url][original] {
        grok {
            match => { "[url][original]" => "%{URIPROTO:[url][scheme]}://(?:%{USER:[url][username]}(?::[^@]*)?@)?(?:%{URIHOST:[url-domain]})?(?:%{URIPATHPARAM:[url][path]})?" }
        }
    }

    ######################################################
    ###          Remove Meraki TLS URL wildcard        ###
    ######################################################
    
    if [url][path] == "/..." {
        mutate { 
            remove_field => [ "[url][path]" ]
            gsub => [ "[url][original]", "\.{3}", "" ]
        }
    }

    ######################################################
    ###                 Domain Parsing                 ###
    ######################################################
    tld {
      source => "[url-domain]"
      target => "urls"
    }
    
    if [domains][trd]{
      mutate {
        join =>  { "[domains][trd]" => "." }
      }
    }

    ######################################################
    ###         Fix for Nanosecond timestamps          ###
    ######################################################
    truncate {
            fields => "nanos"
            length_bytes => 3
    }
    date {
        match => [ "%{millis}%{nanos}", "UNIX_MS"]
        target => "@timestamp"
    }

    mutate {
    ######################################################
    ###                Add core ECS fields             ###
    ######################################################
        add_field => { 
            "[event][kind]" => "event" 
            "[event][category]" => "web"
            "[event][type]" => "connection"
            "[event][action]" => "web_connection"
            "[event][outcome]" => "success"
            "[event][dataset]" => "meraki.urls" 
            "[observer][vendor]" => "meraki" 
            "[network][protocol]" => "%{[url][scheme]}"
            "[network][iana_number]" => "6"
            "[network][transport]" => "tcp"
            "[related][ip]" => [ "%{[source][ip]}", "%{[destination][ip]}" ]
        }

    rename =>    { "[host]" => "[observer][ip]"  }
    gsub => [ "[observer][name]", "\_", "." ]

    ## URL Domain Corrections
    rename =>    { "[urls][domain]" => "[url][registered_domain]"  }
    rename =>    { "[urls][trd]" => "[url][subdomain]"  }
    rename =>    { "[urls][tld]" => "[url][top_level_domain]" } 
    rename =>    { "[url-domain]" => "[url][domain]" } 

    ## standardise http Request Method
    lowercase => [ "[http][request][method]" ]

    #remove temp fields, etc.
    }

    date {
        match => [ "%{millis}%{nanos}", "UNIX_MS"]
        target => "@timestamp"
    }

    ######################################################
    ###                   Community ID                 ###
    ######################################################
    if [source][ip] and [destination][ip] and [network][transport]  {
        ruby {
            path => "/etc/logstash/conf.d/ruby/logstash-ruby-filter-community-id.rb"
            script_params => {
                "source_ip_field" => "[source][ip]"
                "dest_ip_field" => "[destination][ip]"
                "source_port_field" => "[source][port]"
                "dest_port_field" => "[destination][port]"
                "protocol_field" => "[network][transport]"
                "target_field" => "[network][community_id]"
            }
            tag_on_exception =>  "_rubyexception-all-community_id_bidirectional"
        }
    }

    mutate {
        remove_field => [ "message", "millis", "nanos", "ip" , "port", "@version", "type", "[urls]", "[temp]" ]
    }
}

output {

    ## Meraki URL Logging
    elasticsearch {
        hosts => "${ES77_HOST}"
        user => "${ES77_INGEST}"
        password => "${ES77_INGEST_PW}"
        index => "ecs-meraki-url"
        pipeline => "meraki"
    }

   # file {
   #    path => "/var/log/logstash/syslog/meraki-url.log"
   #    codec => "rubydebug"
   # }
}
